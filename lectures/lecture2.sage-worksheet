{
	"session_uuid": "590a4efa-bf72-4191-9aa2-cf8763aa8ee1",
	"title": "Python's Data Structures",
	"description": "Description",
	"content": [
		{
			"title": "Course Topics",
			"content": [
				{
					"id": "c9a82266-0e57-4cfb-a613-b40c9fc5314d",
					"note": "T<span style=\"font-size: 11pt;\">OPICS:<br><br>Thanks for the very helpful survey forms. &nbsp;Based on them, this is what we'll do.<br></span><div><br><div><div>&nbsp; &nbsp;1. Python/Cython -- a crash course</div><div>&nbsp; &nbsp;2. Computational number theory -- (maybe: continued fractions, exact linear algebra, arithmetic of elliptic curves)</div><div>&nbsp; &nbsp;3. Typesetting mathematics and sharing it on the web -- (maybe: creating latex documents; using MathJax; etc.)</div><div>&nbsp; &nbsp;4. Statistic/machine learning -- we'll do one solid topic: Hidden Markov Models</div><div>&nbsp; &nbsp;5. Public key cryptography -- Diffie-Hellman, RSA, El Gammal, elliptic curve crypto.</div><div><br></div><div><br></div></div></div>",
					"hide": [
						"output"
					]
				}
			],
			"id": "27e30022-4de3-4519-8e32-e76e301c0cd0"
		},
		{
			"title": "Python -- a crash course",
			"content": [
				{
					"title": "HOMEWORK",
					"content": [
						{
							"id": "f91c4347-4fdf-4a8b-b77c-ed9ae8a2db3e",
							"note": "<br>",
							"input": "%html\n\n<h3>Homework assignment 1</h3>\n\nDo a bunch of the Python sequences at <a href=\"http://www.codecademy.com/tracks/python\">http://www.codecademy.com/tracks/python</a> and convince me somehow (a screenshot) that you did so (send an email to 2013uw480@gmail.com). \n<br><br><br>\n\n<img src=\"http://justallie.com/wp-content/uploads/2012/01/codecademy-logo-black.png\" class=\"img-rounded\" width=400>\n\n\n<br><br><br>   \n    ",
							"output": [
								{
									"html": "<h3>Homework assignment 1</h3>\nDo a bunch of the Python sequences at <a href=\"http://www.codecademy.com/tracks/python\">http://www.codecademy.com/tracks/python</a> and convince me somehow (a screenshot) that you did so (send an email to 2013uw480@gmail.com). \n<br><br><br>\n<img src=\"http://justallie.com/wp-content/uploads/2012/01/codecademy-logo-black.png\" class=\"img-rounded\" width=400>\n<br><br><br>"
								},
								{
									"stdout": ""
								}
							],
							"hide": [
								"editor",
								"output"
							]
						}
					],
					"id": "1529b298-efc7-40df-a560-1542ef5343b8"
				},
				{
					"id": "47522337-8c5f-497b-82fc-2f3330020c29",
					"note": "<br>",
					"input": "%html\n<h1>Python</h1>\n\nFor this part of the course you don't specifically need to use Sage.  Just get access to some Python 2.x interpreter (sagenb.org, ipython, codeacademy, install python on your computer, just type \"python\" on the command line in OS X or Linux, since it comes with them!).   I *hope* to release a new website by the end of next weekend that will be particularly useful here (command line, editor, etc.)... it's what I'm using to give this lecture right now, but it has a couple of bugs that I want to fix first.\n\n<br><br>\n<ul>\n<li>standard data structures: lists (and list comprehensions), tuples, dictionaries, sets (Python variables are references)</li> \n<li>if, while, for, break: whitespace!</li>\n<li>def: defining functions, variable number of arguments, keywords; lambda functions</li>\n<li>exception handling</li>\n<li>classes (and multiple inheritence)</li>\n<li>modules -- putting your code in files</li>\n</ul>",
					"output": [
						{
							"html": "<h1>Python</h1>\nFor this part of the course you don't specifically need to use Sage.  Just get access to some Python 2.x interpreter (sagenb.org, ipython, codeacademy, install python on your computer, just type \"python\" on the command line in OS X or Linux, since it comes with them!).   I *hope* to release a new website by the end of next weekend that will be particularly useful here (command line, editor, etc.)... it's what I'm using to give this lecture right now, but it has a couple of bugs that I want to fix first.\n\n<br><br>\n<ul>\n<li>standard data structures: lists (and list comprehensions), tuples, dictionaries, sets (Python variables are references)</li> \n<li>if, while, for, break: whitespace!</li>\n<li>def: defining functions, variable number of arguments, keywords; lambda functions</li>\n<li>exception handling</li>\n<li>classes (and multiple inheritence)</li>\n<li>modules -- putting your code in files</li>\n</ul>"
						},
						{
							"stdout": ""
						}
					],
					"hide": [
						"editor",
						"output"
					]
				}
			],
			"id": "4f9be17d-354b-4c6a-9eaa-58fcde31dfdf"
		},
		{
			"title": "Standard data structures:&nbsp;lists (and list comprehensions), tuples, dictionaries, sets; that Python variables are references",
			"content": [
				{
					"title": "Lists",
					"content": [
						{
							"id": "daf4a420-b90d-401b-bfc8-6a2e3fcb9d39",
							"note": "A list is a finite ordered list of references to arbitrary Python objects. The entries of the list do not have to have compatible types.",
							"input": "v = [1, 2, 7, 'abc']\nv",
							"output": [
								{
									"stdout": "[1, 2, 7, 'abc']"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "fabe13aa-96aa-47dd-b503-aabc7e84e18b",
							"input": "type(v)",
							"output": [
								{
									"stdout": "<type 'list'>"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "b9bb5919-a714-4825-8f2b-1408f6e6a1aa",
							"note": "Here's how you obtain the length of a list:",
							"input": "len(v)",
							"output": [
								{
									"stdout": "4"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "988e1c92-de1a-47d2-8ed6-ea9d4619776c",
							"note": "The methods on a list (note that there is no way to find the length using a method except __len__)",
							"input": "v.count(2) # [hit tab key]",
							"output": [
								{
									"stdout": "1"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "846b587f-d804-47de-aee2-44e0c9f1efaa",
							"input": "v.count()",
							"output": [
								{
									"stderr": "Error in lines 1-1\n"
								},
								{
									"stderr": "Traceback (most recent call last):\n"
								},
								{
									"stderr": "  File \"/home/wstein/.sagemathcloud/sage_server.py\", line 406, in execute\n"
								},
								{
									"stderr": "    exec compile(block, '', 'single') in namespace, locals\n"
								},
								{
									"stderr": "  File \"\", line 1, in <module>\n"
								},
								{
									"stderr": "TypeError: count() takes exactly one argument (0 given)\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "00d88e0e-cecc-41c3-b5cd-c8c55c685760",
							"note": "You can do the standard things with a list. &nbsp;",
							"input": "v.append(2); v",
							"output": [
								{
									"stdout": "[1, 2, 7, 2]"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							],
							"hide": [
								"output"
							]
						},
						{
							"id": "ff0d6393-3f2f-4500-9b64-33d3570c66ac",
							"input": "v.pop()",
							"output": [
								{
									"stdout": "2"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							],
							"hide": [
								"output"
							]
						},
						{
							"id": "58f46202-fee3-4d32-9057-0bfc2fa90485",
							"note": "List comprehensions are very cool, especially for math:",
							"input": "v = [n**2 for n in range(10)]; v",
							"output": [
								{
									"stdout": "[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "d7c6ebc8-4c0a-4e58-8461-eca7da52e2f4",
							"input": "v = []\nfor n in range(10):\n    v.append(n**2)",
							"output": [
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "6e4c9a80-b3e7-47ff-8931-5e9f5204daa5",
							"input": "v",
							"output": [
								{
									"stdout": "[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "84de1a97-42cc-4271-a94a-a911b73fc6fe",
							"note": "<br>",
							"input": "v = [n for n in range(100) if n%4 == 3]; v",
							"output": [
								{
									"stdout": "[3, 7, 11, 15, 19, 23, 27, 31, 35, 39, 43, 47, 51, 55, 59, 63, 67, 71, 75, 79, 83, 87, 91, 95, 99]"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							],
							"hide": [
								"output"
							]
						},
						{
							"id": "35f36732-4e92-4f1a-b00b-95177218cc90",
							"input": "[[n,m,n*m] for n in range(3) for m in range(3)]",
							"output": [
								{
									"stdout": "[[0, 0, 0], [0, 1, 0], [0, 2, 0], [1, 0, 0], [1, 1, 1], [1, 2, 2], [2, 0, 0], [2, 1, 2], [2, 2, 4]]"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							],
							"hide": [
								"output"
							]
						},
						{
							"id": "a1e76698-3df1-45bc-a65a-04b6a5b2c032",
							"note": "NOTE: You can alway transform a list comprehension into nested for loops (with minimal re-ordering or changing of notation!):",
							"input": "v = []\nfor n in range(3):\n    for m in range(3):\n        v.append([n,m,n*m])\nv",
							"output": [
								{
									"stdout": "[[0, 0, 0], [0, 1, 0], [0, 2, 0], [1, 0, 0], [1, 1, 1], [1, 2, 2], [2, 0, 0], [2, 1, 2], [2, 2, 4]]"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							],
							"hide": [
								"output"
							]
						},
						{
							"title": "WATCH OUT: Python variables are references!",
							"content": [
								{
									"id": "e77e4097-097f-47de-bc6a-e70b5e4cb199",
									"note": "This is actually very good/powerful, but can be confusing if you don't realize it.",
									"input": "v = [1,2]\nw = [3, v]\nw",
									"output": [
										{
											"stdout": "[3, [1, 2]]"
										},
										{
											"stdout": "\n"
										},
										{
											"stdout": ""
										}
									]
								},
								{
									"id": "87a3c02c-3d93-41b9-89a9-c82fb0f755c2",
									"input": "w[1][0] = 5\nw",
									"output": [
										{
											"stdout": "[3, [5, 2]]"
										},
										{
											"stdout": "\n"
										},
										{
											"stdout": ""
										}
									]
								},
								{
									"id": "00d3b110-7e25-4e30-9534-5b678cfa6a68",
									"input": "v",
									"output": [
										{
											"stdout": "[5, 2]"
										},
										{
											"stdout": "\n"
										},
										{
											"stdout": ""
										}
									]
								},
								{
									"id": "45332a5d-0594-439b-815f-50a5d95844dd",
									"input": "v[0] = 'hi!'\nw",
									"output": [
										{
											"stdout": "[3, ['hi!', 2]]"
										},
										{
											"stdout": "\n"
										},
										{
											"stdout": ""
										}
									]
								},
								{
									"id": "460005d0-68ee-4c63-a0ad-48b376472419",
									"note": "<br>",
									"hide": [
										"output"
									]
								},
								{
									"id": "33865814-e9c7-4739-92fd-30eabe42d207",
									"hide": [
										"output"
									]
								}
							],
							"id": "98440f4a-5366-4927-8274-98fd4269f574"
						}
					],
					"id": "33c518a5-a1ef-4a81-bfb5-ddc4d3571368"
				},
				{
					"title": "Tuples",
					"content": [
						{
							"id": "533499f5-f850-46ff-bd34-95267a6e75c9",
							"note": "<div>Note above that lists are *mutable*, i.e., you can change everything about them. &nbsp; If f is a function and v is a list, doing<br></div><div><br></div><div>&nbsp; &nbsp;f(v)</div><div><br></div><div>can hugely modify v. &nbsp;&nbsp;</div><div><br></div>Technically, a tuple is an immutable list, i.e., a list so that you can't change anything about it. &nbsp; &nbsp;That's it. &nbsp; They are written using parenthesis instead of square brackets.&nbsp;",
							"input": "v = (1,2); v",
							"output": [
								{
									"stdout": "(1, 2)"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "0e991985-6914-452e-b40b-61540b38dc2e",
							"input": "v[0] = 5",
							"output": [
								{
									"stderr": "Error in lines 1-1\n"
								},
								{
									"stderr": "Traceback (most recent call last):\n"
								},
								{
									"stderr": "  File \"/home/wstein/.sagemathcloud/sage_server.py\", line 406, in execute\n"
								},
								{
									"stderr": "    exec compile(block, '', 'single') in namespace, locals\n"
								},
								{
									"stderr": "  File \"\", line 1, in <module>\n"
								},
								{
									"stderr": "TypeError: 'tuple' object does not support item assignment\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "c3622250-6f6a-4233-be6f-c6933e05d89b",
							"input": "v = ([4,5], 17); v",
							"output": [
								{
									"stdout": "([4, 5], 17)"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "cc40b298-896e-477e-abe9-4d219fea5a57",
							"input": "v[0][0] = 'hi'\nv",
							"output": [
								{
									"stdout": "(['hi', 5], 17)"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "5e6d4590-f420-438e-9539-b65c7708c3de",
							"input": "type(v)",
							"output": [
								{
									"stdout": "<type 'tuple'>"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							],
							"hide": [
								"output"
							]
						},
						{
							"id": "df1f4b27-8e36-4702-974d-c5c62d699568",
							"input": "v = (1,2)\nw = (3, v)\nw",
							"output": [
								{
									"stdout": "(3, (1, 2))"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							],
							"hide": [
								"output"
							]
						},
						{
							"id": "2c0b6932-3b22-41f0-95cd-38683775f29a",
							"note": "This will go boom!<br>",
							"input": "w[0] = 5",
							"output": [
								{
									"stderr": "Error in lines 1-1\n"
								},
								{
									"stderr": "Traceback (most recent call last):\n"
								},
								{
									"stderr": "  File \"/home/wstein/.sagemathcloud/sage_server.py\", line 406, in execute\n"
								},
								{
									"stderr": "    exec compile(block, '', 'single') in namespace, locals\n"
								},
								{
									"stderr": "  File \"\", line 1, in <module>\n"
								},
								{
									"stderr": "TypeError: 'tuple' object does not support item assignment\n"
								},
								{
									"stdout": ""
								}
							],
							"hide": [
								"output"
							]
						},
						{
							"id": "108f6e70-84ec-434c-945f-c173a54bcc92",
							"hide": [
								"output"
							]
						}
					],
					"id": "e8c98ebb-08c7-425e-8a09-ceadc2c799f4"
				},
				{
					"title": "Dictionaries",
					"content": [
						{
							"id": "7cbc06e7-2d3f-4817-8bd6-11dc000a49e5",
							"note": "Dictionaries are called \"associative arrays\" in some programming languages. &nbsp; They are called \"functions\" in mathematics :-).&nbsp;<div><br></div><div>Dictionaries are an incredibly useful (and optimized) data structure in Python. &nbsp;<div><div><br></div><div>The keys can be any object that has a __hash__ method, which is supposed to mean anything that is immutable. &nbsp;(This is unlike in Javascript, where the keys must be strings.)</div></div></div>",
							"input": "v = {'sage':'math',   2:[1,2,3],  (1,5):[[1,2],7]}\nv",
							"output": [
								{
									"stdout": "{(1, 5): [[1, 2], 7], 2: [1, 2, 3], 'sage': 'math'}"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "8e23e6de-e9fa-4c8b-83fb-00c70159faff",
							"input": "w = [2,3]\nv[w]='cool stuff'\nw[0] = 5",
							"output": [
								{
									"stderr": "Error in lines 2-2\n"
								},
								{
									"stderr": "Traceback (most recent call last):\n"
								},
								{
									"stderr": "  File \"/home/wstein/.sagemathcloud/sage_server.py\", line 406, in execute\n"
								},
								{
									"stderr": "    exec compile(block, '', 'single') in namespace, locals\n"
								},
								{
									"stderr": "  File \"\", line 1, in <module>\n"
								},
								{
									"stderr": "TypeError: unhashable type: 'list'\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "049afc1c-2655-4598-bd21-080612bf1eae",
							"input": "v",
							"output": [
								{
									"stdout": "{(1, 5): [[1, 2], 7], 2: [1, 2, 3], 'sage': 'math'}"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "e6e0ce14-80ef-4e01-a34d-c4dd7830b372",
							"input": "v.keys()",
							"output": [
								{
									"stdout": "[(1, 5), 2, 'sage']"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "fa95b1e4-331e-4151-b98d-ec146c456236",
							"input": "v['sage'] = 'awesome'; v",
							"output": [
								{
									"stdout": "{(1, 5): [[1, 2], 7], 2: [1, 2, 3], 'sage': 'awesome'}"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "1730baab-d8b9-45f8-bb18-956c419c8005",
							"input": "v[5] = 10; v",
							"output": [
								{
									"stdout": "{(1, 5): [[1, 2], 7], 2: [1, 2, 3], 'sage': 'awesome', 5: 10}"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "8ab1874e-9d68-4924-8bd9-55e17068d63e",
							"note": "This does NOT work since lists are mutable and not hashable:",
							"input": "v[ [1,2,3] ] = 20\nv",
							"output": [
								{
									"stderr": "Error in lines 1-1\n"
								},
								{
									"stderr": "Traceback (most recent call last):\n"
								},
								{
									"stderr": "  File \"/home/wstein/.sagemathcloud/sage_server.py\", line 406, in execute\n"
								},
								{
									"stderr": "    exec compile(block, '', 'single') in namespace, locals\n"
								},
								{
									"stderr": "  File \"\", line 1, in <module>\n"
								},
								{
									"stderr": "TypeError: unhashable type: 'list'\n"
								},
								{
									"stdout": ""
								}
							],
							"hide": [
								"output"
							]
						},
						{
							"id": "fcd2c129-04eb-4157-9fc7-1f3e69558df4",
							"note": "REMARK If you are crazy and want to use lists as keys to a Python dictionary, you can do it.&nbsp;",
							"input": "class EvilList(list):\n    def __hash__(self):\n        return hash(str(self))\n\nm = EvilList([1,2,3]); m    ",
							"output": [
								{
									"stdout": "[1, 2, 3]"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "75cda963-1c30-4da7-92d9-083cca11d4b4",
							"input": "v[ m ] = 20\nv",
							"output": [
								{
									"stdout": "{(1, 5): [[1, 2], 7], 2: [1, 2, 3], [1, 2, 3]: 20, 'sage': 'awesome', 5: 10}"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "5ddfdb46-4315-4c10-8a7c-669418b14023",
							"note": "The above is a bad idea in the same way that assuming something false is a bad idea in mathematics. &nbsp;The dictionary implementation in Python makes the assumption that the keys are immutable. &nbsp;If you don't respect this, then your code will likely have subtle bugs in it. &nbsp;(Example: Sage 1.0)",
							"hide": [
								"output"
							]
						},
						{
							"id": "0295dcb2-d65b-413a-a97f-3bd9e0849e57",
							"note": "You can try to use the keys of a dictionary (say with all values None) as a \"set\" data structure. &nbsp;I used to have to do this when I started using Python a lot in 2003.",
							"input": "S = {2:None, 4:None, 8:None, 13:None}; S",
							"output": [
								{
									"stdout": "{8: None, 2: None, 4: None, 13: None}"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							],
							"hide": [
								"output"
							]
						},
						{
							"id": "dde76d8d-70a4-478e-9d9a-57d4e1f1609d",
							"input": "4 in S",
							"output": [
								{
									"stdout": "True"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							],
							"hide": [
								"output"
							]
						},
						{
							"id": "bd419d77-fbeb-44da-8a1d-4c276516515f",
							"input": "5 in S",
							"output": [
								{
									"stdout": "False"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							],
							"hide": [
								"output"
							]
						},
						{
							"id": "df6f5cd0-073b-448e-a20c-f90401839cc4",
							"input": "v = (2,3)\nhash(v)",
							"output": [
								{
									"stdout": "3713082714463740756"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "51f47f09-9abe-4352-8de1-3491efe841f7",
							"input": "v = ([2,'shannon'], 3)\nv",
							"output": [
								{
									"stdout": "([2, 'shannon'], 3)"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "9a03eb58-b5d1-43b2-886a-b836c03854da",
							"input": "hash(v)",
							"output": [
								{
									"stderr": "Error in lines 1-1\n"
								},
								{
									"stderr": "Traceback (most recent call last):\n"
								},
								{
									"stderr": "  File \"/home/wstein/.sagemathcloud/sage_server.py\", line 406, in execute\n"
								},
								{
									"stderr": "    exec compile(block, '', 'single') in namespace, locals\n"
								},
								{
									"stderr": "  File \"\", line 1, in <module>\n"
								},
								{
									"stderr": "TypeError: unhashable type: 'list'\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "5e259673-dbcc-4552-8cfd-e0b6c1343031",
							"input": "v = (EvilList([2,'shannon']), 3)\nv",
							"output": [
								{
									"stdout": "([2, 'shannon'], 3)"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "1d9d192e-99df-4376-94a9-6cdfa3a6d6c5",
							"input": "hash(v)",
							"output": [
								{
									"stdout": "5299711486737658635"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "eb14fbd6-cc2c-4cd6-986b-c43394b2125a",
							"input": "'shannon' in v",
							"output": [
								{
									"stdout": "False"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "16193876-8ebb-4c8d-996f-c9aadb0f8b3c",
							"input": "3 in v",
							"output": [
								{
									"stdout": "True"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "f056fe44-df4b-44af-b3b2-3908aef89755",
							"hide": [
								"output"
							]
						}
					],
					"id": "e3f4fc75-7c76-4681-bb82-d200c6381d3e"
				},
				{
					"title": "Sets",
					"content": [
						{
							"id": "830e4ab2-364e-4743-a03f-a72813011c56",
							"note": "Sets model the mathematical idea of a finite set. &nbsp;The elements of a set must be immutable (i.e., have a hash method). &nbsp;They are much like the keys of a dictionary, except sets have a numerous methods to make them more set-ish.",
							"input": "S = { 2, 4, 8, 13 }; S",
							"output": [
								{
									"stdout": "set([8, 2, 4, 13])"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "458ea69b-2184-4655-9e3b-8a595a6cf6a7",
							"note": "Note that the order looks pretty random. &nbsp;Don't depend on it.",
							"input": "4 in S",
							"output": [
								{
									"stdout": "True"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "ee9849e4-cb82-4c4c-a346-0fb459594591",
							"input": "5 in S",
							"output": [
								{
									"stdout": "False"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "a146205f-c9fe-41bc-9c8a-d4f2c1c5a0a4",
							"input": "S",
							"output": [
								{
									"stdout": "set([8, 2, 4, 13])"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "4ba3184c-787d-46e1-abdd-5f3a4ef0e3f7",
							"input": "S.intersection( {7, 11, 13} )",
							"output": [
								{
									"stdout": "set([13])"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "bb7cc049-51f7-4e29-b293-6177b1743981",
							"input": "Primes()",
							"output": [
								{
									"stdout": "Set of all prime numbers: 2, 3, 5, 7, ..."
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "6de250fd-3082-4a8a-872e-e063d95d6b8c",
							"input": "prime_pi(10^5)",
							"output": [
								{
									"stdout": "9592"
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						},
						{
							"id": "746ec8f1-6cce-45c2-a2d8-b870fb82062f",
							"input": "plot(prime_pi, 2, 5000) + plot(Li, 2, 5000)",
							"output": [
								{
									"file": {
										"show": true,
										"uuid": "987e53e3-e047-4b3a-aec6-7e5f5416d7cd",
										"filename": "/home/wstein/.sage/temp/u/5945/tmp_sXsigR.svg"
									}
								},
								{
									"stdout": "\n"
								},
								{
									"stdout": ""
								}
							]
						}
					],
					"id": "30d87419-1e5b-4171-8279-32115075ae47"
				},
				{
					"id": "a1b160f1-cb8b-4807-8894-5307b5345430",
					"hide": [
						"output"
					]
				}
			],
			"id": "1626e6f6-f6ea-49c8-9ea9-141f0d692c0a"
		},
		{
			"title": "If, while, for, break... and whitespace",
			"content": [
				{
					"id": "3a729c83-6bf0-464f-8281-f6efb09bb130",
					"hide": [
						"output"
					]
				},
				{
					"id": "48a00a84-9881-4fc8-81e9-90048a6e7fef",
					"hide": [
						"output"
					]
				},
				{
					"id": "71f1600b-4a5d-4b47-a689-4255196d81fc",
					"hide": [
						"output"
					]
				},
				{
					"id": "3f9caa03-42ac-4e19-9fb3-b57f44ad2170",
					"hide": [
						"output"
					]
				}
			],
			"id": "278162f4-f50c-4a81-a700-3c81bf2abf77"
		},
		{
			"title": "def, lambda",
			"content": [
				{
					"id": "d122f98d-d4c3-42da-bf6f-e5673c961fa6",
					"hide": [
						"output"
					]
				},
				{
					"id": "1ddaa1f4-afaf-4aff-9055-2d4bca0a59af",
					"hide": [
						"output"
					]
				},
				{
					"id": "c9b6f2f7-3b0a-4a3c-8d58-2c0da0dd018e",
					"hide": [
						"output"
					]
				},
				{
					"id": "9dd2e408-3f95-45e2-a9e6-76e8d4bc9db3",
					"hide": [
						"output"
					]
				},
				{
					"id": "cee528ee-7b78-4242-98e1-c5d27b459d8e",
					"hide": [
						"output"
					]
				}
			],
			"id": "0b63237e-021f-4493-85e6-740d1ce96f6a"
		},
		{
			"title": "Exception Handling",
			"content": [
				{
					"id": "48131014-cb8d-41e7-9163-4c87963c5611",
					"hide": [
						"output"
					]
				},
				{
					"id": "47d2100e-75fc-43fd-9f68-63a303252ca9",
					"hide": [
						"output"
					]
				},
				{
					"id": "b6c5ab91-9d25-4309-a199-b459c6a7f2b4",
					"hide": [
						"output"
					]
				},
				{
					"id": "8eb97240-3841-4d94-bcac-bb7c9c173e03",
					"hide": [
						"output"
					]
				}
			],
			"id": "19218c4f-c27d-4762-9992-bd2c20761afa"
		},
		{
			"title": "Classes and Multiple Inheritence",
			"content": [
				{
					"id": "879b71a9-d898-48bd-bb19-1f21965fac5b",
					"hide": [
						"output"
					]
				},
				{
					"id": "8cba9bf5-b74b-4d4f-8c8d-cca0196021bb",
					"hide": [
						"output"
					]
				},
				{
					"id": "64d3bb16-8850-44bc-b65c-f791ae2ad900",
					"hide": [
						"output"
					]
				},
				{
					"id": "7d9a3241-91db-476d-96e6-937c5be60772",
					"hide": [
						"output"
					]
				}
			],
			"id": "32d5ba64-2cb2-4698-ad94-ee29e68657bb"
		},
		{
			"title": "Modules: putting your code in files",
			"content": [
				{
					"id": "7bbf780d-0e58-4255-b488-ded297940bd0",
					"hide": [
						"output"
					]
				},
				{
					"id": "c36f2496-0283-452c-87d0-671593034f39",
					"hide": [
						"output"
					]
				},
				{
					"id": "181f9769-38e3-4e42-bb15-b4092c726510",
					"hide": [
						"output"
					]
				}
			],
			"id": "ac4eb157-c430-40d0-aee9-75aa80b04f5c"
		},
		{
			"id": "7748a527-8de7-4f50-bc53-42087377e658",
			"note": "<div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div><div><br></div>",
			"hide": [
				"output"
			]
		}
	]
}